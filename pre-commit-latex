#!/usr/bin/python
# -*- coding: utf-8 -*-
"""That is a pre-commit hook to check spurious space in .dtx file
It allows empty line, but not line not finished by %.

MaÃ¯eul Rouquette 2014-....
v 1.0.2
Licence GPl3 https://www.gnu.org/licenses/gpl-3.0.txt
"""

import os
import os.path
import re
import sys

commands = [
    {
        "name":"line_percent_signe",
        "warning":"Spurious space"
        }
        ]

def change_line_number(line_number,line):
    """Change line number, depending of the current line"""
    if line[0:2] == "@@": # line number
        line_number = re.findall("\+(\d+),?",line)
        line_number = int(line_number[0]) -1
    elif not line[0] == "-" and not line[0:1] == "\\":
        line_number = line_number + 1
    return line_number 

def check_lines():
    """ Check all modified lines"""
    to_be_checked = ["dtx","sty","bbx","cbx","lbx"]
    diff = os.popen("git diff  --cached")
    lines_results =[]
    line_number = 0
    file = ""
    
    for line in diff:
        line_number = change_line_number(line_number,line)
        # what is the file?
        if  "+++ b/" in line:
            file = line[6:-1]
            extension = os.path.splitext(file)[1][1:]
        elif  "++ /dev/null" in line:
            extension = ""
            file = ""
        elif line[0] == "+" and extension in to_be_checked:
            check = check_line(line,line_number)
            lines_results.append({
                 "line_number":line_number, 
                 "content":line,
                 "results":check,
                 "file":file
                 })
    return lines_results

def check_line(line,line_number):
    """Check individual added line"""
    results = []

    for cmd in commands: #Use all commands, keep results
        f = getattr(sys.modules[__name__],"check_"+cmd["name"])
        check = f(line,line_number)
        if not check:
            results.append(cmd["warning"])
    
    return results

def check_line_percent_signe(line,line_number):
    """"Check line finish by %"""

    line = line.replace("\%","")    # Don't look for protected %  
    
    if line == "+\n":             # Allow empty line
        return True
    
    elif "%" not in line:         # If not % -> problem
        return False

    elif re.search ("\s+%",line): # Spaces before % -> problem 
        return False
    else:
        return True
def __main__():
    """Main function: calls the check to bad line, print them if need, and return exit if error"""
    lines_results = check_lines()
    exit = 0 #Set to 1 if we have ONE bad line. 
    seen_files=[]
    for line in lines_results:
        if line["results"]!={}: #there is some error 
            exit=1
            if line["file"] not in seen_files:
                 seen_files.append(line["file"])
                 print (line["file"])
            print ("\x1b[31m\tl."+ str(line["line_number"]) + ": " + line["content"][:-1])
            for error in line["results"]:
                print ("\t\t " + error )
            print("\x1b[0m")
    sys.exit(exit)


__main__()
